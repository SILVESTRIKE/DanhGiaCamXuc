import streamlit as st
import torch
from transformers import AutoTokenizer, AutoModelForSequenceClassification
from pyvi import ViTokenizer
import re
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import datetime

# ƒê·ªãnh nghƒ©a b·ªô aspects cho 2 m√¥ h√¨nh
ASPECTS_RESTAURANT = [
    'FOOD#QUALITY', 'FOOD#PRICES', 'SERVICE#GENERAL', 'AMBIENCE#GENERAL',
    'LOCATION#GENERAL', 'RESTAURANT#GENERAL', 'FOOD#STYLE&OPTIONS',
    'RESTAURANT#PRICES', 'RESTAURANT#MISCELLANEOUS', 'DRINKS#QUALITY',
    'DRINKS#PRICES', 'DRINKS#STYLE&OPTIONS'
]

ASPECTS_HOTEL = [
    'HOTEL#GENERAL', 'HOTEL#COMFORT', 'HOTEL#CLEANLINESS', 'HOTEL#DESIGN&FEATURES',
    'HOTEL#QUALITY', 'HOTEL#PRICES', 'ROOMS#GENERAL', 'ROOMS#CLEANLINESS',
    'ROOMS#DESIGN&FEATURES', 'ROOMS#COMFORT', 'ROOMS#QUALITY', 'ROOMS#PRICES',
    'ROOM_AMENITIES#GENERAL', 'ROOM_AMENITIES#CLEANLINESS', 'ROOM_AMENITIES#QUALITY',
    'ROOM_AMENITIES#DESIGN&FEATURES', 'ROOM_AMENITIES#COMFORT', 'FACILITIES#GENERAL',
    'FACILITIES#QUALITY', 'FACILITIES#DESIGN&FEATURES', 'FACILITIES#CLEANLINESS',
    'FACILITIES#COMFORT', 'FACILITIES#PRICES', 'LOCATION#GENERAL', 'SERVICE#GENERAL',
    'FOOD&DRINKS#QUALITY', 'FOOD&DRINKS#STYLE&OPTIONS', 'FOOD&DRINKS#PRICES',
    'FOOD&DRINKS#MISCELLANEOUS'
]

LABEL_ENCODER = [ 'negative', 'neutral', 'positive']

# Load model/tokenizer d·ª±a tr√™n model ch·ªçn
@st.cache_resource
def load_tokenizer_and_model(model_choice):
    if model_choice == "Nh√† h√†ng":
        model_path = "./models/phobert_restaurant_model"
        aspects = ASPECTS_RESTAURANT
    else:
        model_path = "./models/phobert_hotel_model"
        aspects = ASPECTS_HOTEL

    tokenizer = AutoTokenizer.from_pretrained(model_path)
    model = AutoModelForSequenceClassification.from_pretrained(model_path)
    model.eval()
    return tokenizer, model, aspects

def preprocess_text(text):
    text = re.sub(r'[^\w\s]', '', text)
    return ViTokenizer.tokenize(text.lower())


def predict(text, tokenizer, model, aspects, label_encoder):
    clean_text = preprocess_text(text)

    # Aspect keywords theo model
    if aspects == ASPECTS_RESTAURANT:
        aspect_keywords = {
            'FOOD#QUALITY': ['ngon', 'd·ªü', 't∆∞∆°i', 'ch·∫•t l∆∞·ª£ng', 'v·ªã', 'th·ª©c ƒÉn', 'ƒë·ªì ƒÉn'],
            'FOOD#PRICES': ['gi√°', 'r·∫ª', 'ƒë·∫Øt', 'ti·ªÅn', 'chi ph√≠'],
            'SERVICE#GENERAL': ['ph·ª•c v·ª•', 'nh√¢n vi√™n', 'nhanh', 'ch·∫≠m', 'th√°i ƒë·ªô'],
            'AMBIENCE#GENERAL': ['kh√¥ng gian', 'view', 's·∫°ch', 'b·∫©n', 'tho√°ng', 'ƒë·∫πp'],
            'LOCATION#GENERAL': ['v·ªã tr√≠', 'ƒë·ªãa ƒëi·ªÉm', 'd·ªÖ t√¨m', 'xa', 'g·∫ßn'],
            'RESTAURANT#GENERAL': ['qu√°n', 'nh√† h√†ng', 't·ªïng th·ªÉ', 'tr·∫£i nghi·ªám'],
            'FOOD#STYLE&OPTIONS': ['m√≥n', 'menu', 'ƒëa d·∫°ng', 'l·ª±a ch·ªçn', 'ki·ªÉu'],
            'RESTAURANT#PRICES': ['gi√° c·∫£', 'chi ph√≠', 'h·ª£p l√Ω', 'ƒë·∫Øt ƒë·ªè'],
            'RESTAURANT#MISCELLANEOUS': ['g·ª≠i xe', 'v·ªá sinh', 'khƒÉn l·∫°nh', 'ti·ªán √≠ch'],
            'DRINKS#QUALITY': ['n∆∞·ªõc u·ªëng', 'tr√†', 'n∆∞·ªõc ng·ªçt', 'ƒë·ªì u·ªëng'],
            'DRINKS#PRICES': ['gi√°', 'r·∫ª', 'ƒë·∫Øt', 'n∆∞·ªõc u·ªëng'],
            'DRINKS#STYLE&OPTIONS': ['n∆∞·ªõc u·ªëng', 'menu', 'ƒëa d·∫°ng']
        }
    else:
        aspect_keywords = {
            'HOTEL#GENERAL': ['kh√°ch s·∫°n', 't·ªïng th·ªÉ', 'tr·∫£i nghi·ªám'],
            'HOTEL#COMFORT': ['tho·∫£i m√°i', 'y√™n tƒ©nh', '·ªìn √†o'],
            'HOTEL#CLEANLINESS': ['s·∫°ch s·∫Ω', 'b·∫©n', 'v·ªá sinh'],
            'HOTEL#DESIGN&FEATURES': ['ƒë·∫πp', 'thi·∫øt k·∫ø', 'ki·∫øn tr√∫c', 'm·ªõi'],
            'HOTEL#QUALITY': ['ch·∫•t l∆∞·ª£ng', 'ti√™u chu·∫©n'],
            'HOTEL#PRICES': ['gi√°', 'r·∫ª', 'ƒë·∫Øt', 'h·ª£p l√Ω'],
            'ROOMS#GENERAL': ['ph√≤ng', 'ph√≤ng ·ªëc'],
            'ROOMS#CLEANLINESS': ['s·∫°ch', 'b·∫©n', 'v·ªá sinh ph√≤ng'],
            'ROOMS#DESIGN&FEATURES': ['r·ªông', 'ch·∫≠t', 'thi·∫øt k·∫ø ph√≤ng'],
            'ROOMS#COMFORT': ['tho·∫£i m√°i', 'kh√≥ ch·ªãu', 'gi∆∞·ªùng'],
            'ROOMS#QUALITY': ['ch·∫•t l∆∞·ª£ng ph√≤ng'],
            'ROOMS#PRICES': ['gi√° ph√≤ng', 'chi ph√≠'],
            'ROOM_AMENITIES#GENERAL': ['ti·ªán nghi', 'ƒë·ªì d√πng'],
            'ROOM_AMENITIES#CLEANLINESS': ['khƒÉn s·∫°ch', 'khƒÉn b·∫©n'],
            'ROOM_AMENITIES#QUALITY': ['ch·∫•t l∆∞·ª£ng ƒë·ªì d√πng'],
            'ROOM_AMENITIES#DESIGN&FEATURES': ['thi·∫øt k·∫ø ƒë·ªì d√πng'],
            'ROOM_AMENITIES#COMFORT': ['tho·∫£i m√°i ƒë·ªì d√πng'],
            'FACILITIES#GENERAL': ['c∆° s·ªü', 'd·ªãch v·ª•'],
            'FACILITIES#QUALITY': ['ch·∫•t l∆∞·ª£ng c∆° s·ªü'],
            'FACILITIES#DESIGN&FEATURES': ['thi·∫øt k·∫ø c∆° s·ªü', 'b·ªÉ b∆°i'],
            'FACILITIES#CLEANLINESS': ['s·∫°ch c∆° s·ªü'],
            'FACILITIES#COMFORT': ['tho·∫£i m√°i c∆° s·ªü'],
            'FACILITIES#PRICES': ['gi√° d·ªãch v·ª•'],
            'LOCATION#GENERAL': ['v·ªã tr√≠', 'ƒë·ªãa ƒëi·ªÉm', 'g·∫ßn', 'xa'],
            'SERVICE#GENERAL': ['ph·ª•c v·ª•', 'nh√¢n vi√™n', 'th√°i ƒë·ªô'],
            'FOOD&DRINKS#QUALITY': ['ngon', 'd·ªü', 'ch·∫•t l∆∞·ª£ng ƒë·ªì ƒÉn'],
            'FOOD&DRINKS#STYLE&OPTIONS': ['ƒëa d·∫°ng', 'menu', 'l·ª±a ch·ªçn'],
            'FOOD&DRINKS#PRICES': ['gi√° ƒë·ªì ƒÉn', 'r·∫ª', 'ƒë·∫Øt'],
            'FOOD&DRINKS#MISCELLANEOUS': ['b·ªØa s√°ng', 'buffet']
        }

    mentioned_aspects = [aspect for aspect, keywords in aspect_keywords.items() if any(keyword in clean_text for keyword in keywords)]
    if not mentioned_aspects:
        return "Kh√¥ng ph√°t hi·ªán kh√≠a c·∫°nh n√†o li√™n quan trong c√¢u."

    encoding = tokenizer.encode_plus(
        clean_text,
        add_special_tokens=True,
        max_length=128,
        return_token_type_ids=False,
        padding='max_length',
        truncation=True,
        return_attention_mask=True,
        return_tensors='pt'
    )

    input_ids = encoding['input_ids']
    attention_mask = encoding['attention_mask']

    with torch.no_grad():
        outputs = model(input_ids, attention_mask=attention_mask)
    logits = outputs.logits.view(-1, len(aspects), 3)
    probs = torch.nn.functional.softmax(logits, dim=2)[0]
    preds = torch.argmax(probs, dim=1)

    results = {}
    for i, aspect in enumerate(aspects):
        if aspect in mentioned_aspects:
            label_id = preds[i].item()
            label_probs = probs[i].tolist()
            results[aspect] = {
                "label": LABEL_ENCODER[label_id],
                "probs": label_probs
            }
    return results, len(text), input_ids.shape[1], len(clean_text.split()), datetime.datetime.now()


# Kh·ªüi t·∫°o session state
if 'history' not in st.session_state:
    st.session_state.history = []

if 'selected_history_index' not in st.session_state:
    st.session_state.selected_history_index = None

st.set_page_config(page_title="Ph√¢n t√≠ch c·∫£m x√∫c ƒëa m√¥ h√¨nh", layout="wide")
tabs = st.tabs(["üîç Nh·∫≠p li·ªáu & K·∫øt qu·∫£", "üìà Bi·ªÉu ƒë·ªì", "üìú L·ªãch s·ª≠", "üìä Th·ªëng k√™"])

with tabs[0]:
    st.title("üîç Nh·∫≠p li·ªáu & K·∫øt qu·∫£")

    # Model selection
    model_choice = st.selectbox("Ch·ªçn m√¥ h√¨nh ph√¢n t√≠ch", ["Nh√† h√†ng", "Kh√°ch s·∫°n"])

    tokenizer, model, aspects = load_tokenizer_and_model(model_choice)

    if st.session_state.selected_history_index is not None:
        entry = st.session_state.history[st.session_state.selected_history_index]
        text_input = entry['text']
        results = entry['result']
        char_len = entry['char_len']
        token_len = entry['token_len']
        word_count = entry['word_count']
        timestamp = entry['time']
        saved_model_choice = entry['model_choice']
        st.session_state.selected_history_index = None
    else:
        text_input = st.text_area("Nh·∫≠p ƒë√°nh gi√° c·ªßa b·∫°n:", height=150)
        results = None
        saved_model_choice = model_choice

    if st.button("Ph√¢n t√≠ch", key="analyze") and results is None:
        if not text_input.strip():
            st.warning("Vui l√≤ng nh·∫≠p n·ªôi dung ƒë·ªÉ ph√¢n t√≠ch.")
        else:
            prediction = predict(text_input, tokenizer, model, aspects, LABEL_ENCODER)
            if isinstance(prediction, str):
                st.warning(prediction)
            else:
                results, char_len, token_len, word_count, timestamp = prediction
                saved_model_choice = model_choice
                st.session_state.history.append({
                    "text": text_input,
                    "result": results,
                    "char_len": char_len,
                    "token_len": token_len,
                    "word_count": word_count,
                    "time": timestamp,
                    "model_choice": saved_model_choice
                })

    if results:
        st.subheader("K·∫øt qu·∫£ ph√¢n t√≠ch")
        rows = []
        for aspect, detail in results.items():
            rows.append([aspect, detail['label'], *detail['probs']])
        df = pd.DataFrame(rows, columns=["Kh√≠a c·∫°nh", "C·∫£m x√∫c", "T√≠ch c·ª±c", "Ti√™u c·ª±c", "Trung t√≠nh"])
        st.dataframe(df)

        final_counts = df['C·∫£m x√∫c'].value_counts()
        final_sentiment = final_counts.idxmax() if not final_counts.empty else "neutral"
        confidence = df[["T√≠ch c·ª±c", "Ti√™u c·ª±c", "Trung t√≠nh"]].max(axis=1).mean()
        score = round(confidence * 10, 2)

        colors = {"POSITIVE": ("#ccffcc", "#006600"), "NEGATIVE": ("#ffcccc", "#660000"), "NEUTRAL": ("#e6e6e6", "#333333")}.get(final_sentiment.upper(), ("#ffffff", "#000000"))
        bg_color, text_color = colors
        st.markdown(f'<div style="background-color: {bg_color}; color: {text_color}; border: 1px solid #ccc; padding: 10px; border-radius: 5px;">T·ªïng k·∫øt: ƒê√°nh gi√° to√†n c√¢u l√† <b>{final_sentiment.upper()}</b> v·ªõi ƒë·ªô t·ª± tin kho·∫£ng <b>{confidence:.2f}</b>, ƒëi·ªÉm ƒë√°nh gi√° ∆∞·ªõc l∆∞·ª£ng: <b>{score}/10</b></div>', unsafe_allow_html=True)
        st.markdown(f"**ƒê·ªô d√†i vƒÉn b·∫£n:** {char_len} k√Ω t·ª± | {word_count} t·ª´ | {token_len} token sau m√£ h√≥a")

with tabs[1]:
    st.title("üìà Bi·ªÉu ƒë·ªì t·ªïng quan")

    if not st.session_state.history:
        st.info("Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì.")
    else:
        latest = st.session_state.history[-1]
        tokenizer, model, aspects = load_tokenizer_and_model(latest['model_choice'])

        df = pd.DataFrame([
            [aspect, detail['label'], *detail['probs']] for aspect, detail in latest['result'].items()
        ], columns=["Kh√≠a c·∫°nh", "C·∫£m x√∫c", "T√≠ch c·ª±c", "Ti√™u c·ª±c", "Trung t√≠nh"])

        st.markdown(f"**ƒê·ªô d√†i vƒÉn b·∫£n:** {latest['char_len']} k√Ω t·ª± | {latest['word_count']} t·ª´ | {latest['token_len']} token")

        col1, col2 = st.columns(2)
        with col1:
            st.markdown("### üéØ T·ª∑ l·ªá c·∫£m x√∫c")
            sentiments = df['C·∫£m x√∫c'].value_counts()
            fig1, ax1 = plt.subplots()
            ax1.pie(sentiments, labels=sentiments.index, autopct ='%1.1f%%', colors=sns.color_palette('pastel'))
            st.pyplot(fig1)

        with col2:
            st.markdown("### üß© Bi·ªÉu ƒë·ªì kh√≠a c·∫°nh")
            fig2, ax2 = plt.subplots()
            sns.countplot(x="C·∫£m x√∫c", data=df, palette='viridis', ax=ax2)
            st.pyplot(fig2)

        col3, col4 = st.columns(2)
        with col3:
            st.markdown("### üß™ Ph√¢n ph·ªëi token")
            token_lengths = [entry['token_len'] for entry in st.session_state.history if entry['model_choice'] == latest['model_choice']]
            fig3, ax3 = plt.subplots()
            sns.histplot(token_lengths, bins=10, kde=True, ax=ax3)
            st.pyplot(fig3)

        with col4:
            st.markdown("### üìâ Bi·ªÉu ƒë·ªì x√°c su·∫•t trung b√¨nh")
            mean_probs = df[["T√≠ch c·ª±c", "Ti√™u c·ª±c", "Trung t√≠nh"]].mean()
            fig4, ax4 = plt.subplots()
            sns.barplot(x=mean_probs.index, y=mean_probs.values, palette='pastel', ax=ax4)
            st.pyplot(fig4)
with tabs[2]:
    st.title("üìú L·ªãch s·ª≠ t∆∞∆°ng t√°c")
    if st.button("üóëÔ∏è X√≥a to√†n b·ªô l·ªãch s·ª≠"):
        st.session_state.history = []
        st.success("ƒê√£ x√≥a l·ªãch s·ª≠.")
        st.experimental_rerun()

    for idx, entry in enumerate(reversed(st.session_state.history)):
        i = len(st.session_state.history) - 1 - idx
        col1, col2 = st.columns([8, 2])
        with col1:
            if st.button(f"Xem l·∫°i [{entry['time'].strftime('%Y-%m-%d %H:%M:%S')}] [{entry['model_choice']}] {entry['text'][:40]}...", key=f"load_{i}"):
                st.session_state.selected_history_index = i
                st.experimental_rerun()
        with col2:
            if st.button("Xo√°", key=f"delete_{i}"):
                st.session_state.history.pop(i)
                st.experimental_rerun()
with tabs[3]:
    st.title("üìä Th·ªëng k√™ t·ªïng h·ª£p")

    if not st.session_state.history:
        st.info("Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ th·ªëng k√™.")
    else:
        total = len(st.session_state.history)
        st.metric("T·ªïng s·ªë l∆∞·ª£t ƒë√°nh gi√°", total)

        latest_model_choice = st.session_state.history[-1]['model_choice']

        times = [item['time'] for item in st.session_state.history if item['model_choice'] == latest_model_choice]
        sentiments_all = []
        for item in st.session_state.history:
            if item['model_choice'] == latest_model_choice:
                for aspect, detail in item['result'].items():
                    sentiments_all.append({"time": item['time'], "label": detail['label']})

        df_all = pd.DataFrame(sentiments_all)
        if not df_all.empty:
            df_all['date'] = df_all['time'].dt.date
            st.markdown(f"### üìÖ Bi·ªÉu ƒë·ªì c·∫£m x√∫c theo th·ªùi gian cho model **{latest_model_choice}**")
            fig_time, ax_time = plt.subplots()
            sns.countplot(x="date", hue="label", data=df_all, ax=ax_time)
            ax_time.set_ylabel("S·ªë l∆∞·ª£t")
            st.pyplot(fig_time)

        st.markdown(f"### ‚öôÔ∏è Th√¥ng s·ªë m√¥ h√¨nh cho model **{latest_model_choice}**")
        st.markdown(f"- M√¥ h√¨nh: `{latest_model_choice}`")
        st.markdown(f"- T·ªïng s·ªë kh√≠a c·∫°nh: {len(ASPECTS_RESTAURANT) if latest_model_choice=='Nh√† h√†ng' else len(ASPECTS_HOTEL)}")
        st.markdown(f"- Nh√£n: {', '.join(LABEL_ENCODER)}")
        st.markdown(f"- Th·ªùi gian ph√¢n t√≠ch ƒë·∫ßu ti√™n: {min(times).strftime('%Y-%m-%d %H:%M:%S') if times else 'Ch∆∞a c√≥ d·ªØ li·ªáu'}")
        st.markdown(f"- Th·ªùi gian g·∫ßn nh·∫•t: {max(times).strftime('%Y-%m-%d %H:%M:%S') if times else 'Ch∆∞a c√≥ d·ªØ li·ªáu'}")
